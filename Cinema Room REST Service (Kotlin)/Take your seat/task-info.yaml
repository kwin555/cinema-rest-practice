type: edu
files:
  - name: src/cinema/Application.kt
    visible: true
    text: |
      package cinema
      
      import org.springframework.boot.autoconfigure.SpringBootApplication
      import org.springframework.boot.runApplication
      
      @SpringBootApplication
      class Application
      
      fun main(args: Array<String>) {
          runApplication<Application>(*args)
      }
    learner_created: false
  - name: src/resources/application.properties
    visible: true
    text: |-
      server.port=28852
      management.endpoints.web.exposure.include=*
      management.endpoint.shutdown.enabled=true
    learner_created: false
  - name: build.gradle
    visible: true
    text: |
      import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
      
      buildscript {
          repositories {
              mavenCentral()
          }
          dependencies {
              classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$hs.kotlin.version"
              classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
              classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
              classpath "org.jetbrains.kotlin:kotlin-allopen:$hs.kotlin.version"
              classpath "org.jetbrains.kotlin:kotlin-noarg:$hs.kotlin.version"
          }
      }
      
      apply plugin: 'java'
      apply plugin: 'kotlin'
      apply plugin: 'org.springframework.boot'
      apply plugin: 'io.spring.dependency-management'
      apply plugin: "kotlin-spring"
      apply plugin: "kotlin-jpa"
      
      repositories {
          mavenCentral()
      }
      
      sourceSets.main.resources.srcDirs = ["src/resources"]
      
      dependencies {
          implementation 'org.springframework.boot:spring-boot-starter'
          implementation 'org.springframework.boot:spring-boot-starter-actuator'
          implementation 'org.springframework.boot:spring-boot-starter-web'
          implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
          implementation 'org.jetbrains.kotlin:kotlin-reflect'
      }
      
      tasks.withType(KotlinCompile) {
          kotlinOptions {
              freeCompilerArgs = ['-Xjsr305=strict']
              jvmTarget = "$hs.kotlin.javaVersion"
          }
      }
    learner_created: false
  - name: src/cinema/controllers/SeatsController.kt
    visible: true
    text: |-
      package cinema.controllers
      
      import cinema.dtos.CinemaDto
      import cinema.models.Seat
      import org.springframework.http.ResponseEntity
      import org.springframework.web.bind.annotation.GetMapping
      import org.springframework.web.bind.annotation.RestController
      
      @RestController
      class SeatsController {
      
          @GetMapping("/seats")
          fun getSeats(): ResponseEntity<CinemaDto?>? {
              return ResponseEntity.ok(CinemaDto(9, 9, createSeats(9, 9)))
          }
      
          // build private fun that creates a 1d list of 9x9 seats, 81 seats total
          private fun createSeats(columns: Int, rows: Int): MutableList<Seat> {
              val seats = mutableListOf<Seat>()
              for (i in 1..columns) {
                  for (j in 1..rows) {
                      seats.add(Seat(i, j))
                  }
              }
              return seats
          }
      
      
      }
    learner_created: false
  - name: src/cinema/models/Seat.kt
    visible: true
    text: |-
      package cinema.models
      
      data class Seat (var row: Int, var column: Int)
    learner_created: false
  - name: src/cinema/dtos/CinemaDto.kt
    visible: true
    text: |-
      package cinema.dtos
      
      import cinema.models.Seat
      
      data class  CinemaDto (val total_rows: Int, val total_columns: Int, val available_seats: MutableList<Seat>)
    learner_created: false
  - name: test/CinemaTests.java
    visible: false
    text: |-
      import cinema.ApplicationKt;
      import com.google.gson.Gson;
      import org.hyperskill.hstest.dynamic.DynamicTest;
      import org.hyperskill.hstest.dynamic.input.DynamicTesting;
      import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
      import org.hyperskill.hstest.mocks.web.response.HttpResponse;
      import org.hyperskill.hstest.stage.SpringTest;
      import org.hyperskill.hstest.testcase.CheckResult;
      
      import java.util.Map;
      
      import static org.hyperskill.hstest.testing.expect.Expectation.expect;
      import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;
      
      public class CinemaTests extends SpringTest {
      
          private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
          private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
      
          private static final Gson gson = new Gson();
      
          public CinemaTests() {
              super(ApplicationKt.class);
          }
      
          private static void checkStatusCode(HttpResponse resp, int status) {
              if (resp.getStatusCode() != status) {
                  throw new WrongAnswer(
                      resp.getRequest().getMethod() + " " +
                          resp.getRequest().getLocalUri() +
                          " should respond with status code " + status + ", " +
                          "responded: " + resp.getStatusCode() + "\n\n" +
                          "Response body:\n\n" + resp.getContent()
                  );
              }
          }
      
          CheckResult testEndpoint() {
              HttpResponse response = get("/seats").send();
              checkStatusCode(response, 200);
              return CheckResult.correct();
          }
      
          CheckResult testEndpointAvailableSeats() {
              HttpResponse response = get("/seats").send();
              expect(response.getContent()).asJson().check(
                  isObject()
                      .value("available_seats",
                          isArray(
                              81,
                              isObject()
                                  .value("row", isInteger(i -> i >= 1 && i <= 9))
                                  .value("column", isInteger(i -> i >= 1 && i <= 9))
                                  .value("price", isInteger(price -> price == 10 || price == 8))
                          )
                      )
                      .value("total_columns", 9)
                      .value("total_rows", 9)
              );
              return CheckResult.correct();
          }
      
          CheckResult testPurchaseTicket() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 200);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("row", 1)
                          .value("column", 1)
                          .value("price", 10)
                  );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatTicketHasBeenPurchased() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
              return CheckResult.correct();
          }
      
          CheckResult testErrorMessageThatNumbersOutOfBounds() {
              HttpResponse response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "10",
                      "column", "1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
              response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "1",
                      "column", "10"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
              response = post(
                  "/purchase",
                  gson.toJson(Map.of(
                      "row", "-1",
                      "column", "-1"
                  ))
              ).send();
      
              checkStatusCode(response, 400);
      
              expect(response.getContent()).asJson()
                  .check(
                      isObject()
                          .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                          .anyOtherValues()
                  );
      
      
              return CheckResult.correct();
          }
      
          @DynamicTest
          DynamicTesting[] dynamicTests = new DynamicTesting[]{
              this::testEndpoint,
              this::testEndpointAvailableSeats,
              this::testPurchaseTicket,
              this::testErrorMessageThatTicketHasBeenPurchased,
              this::testErrorMessageThatNumbersOutOfBounds
          };
      }
    learner_created: false
  - name: src/cinema/requestbodies/Ticket.kt
    visible: true
    learner_created: true
  - name: src/cinema/responseBody/TicketResponse.kt
    visible: true
    learner_created: true
  - name: src/cinema/responseBody/SeatResponse.kt
    visible: true
    learner_created: true
feedback_link: https://hyperskill.org/learn/step/20458#comment
status: Failed
feedback:
  message: Execution failed
  time: "Wed, 15 Nov 2023 17:04:03 UTC"
record: 2
